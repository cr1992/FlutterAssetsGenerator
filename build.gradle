import org.jetbrains.changelog.ExtensionsKt

plugins {
    id 'java'
    id "org.jetbrains.intellij" version "1.1.6"
    id 'org.jetbrains.kotlin.jvm' version '1.7.20'
    // Gradle Changelog Plugin
    id 'org.jetbrains.changelog' version "1.3.1"
}

apply plugin: 'org.jetbrains.changelog'

String properties(String key) {
    return project.findProperty(key).toString()
}


group = properties("pluginGroup")
version = properties("pluginVersion")

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    pluginName = properties("pluginName")

    version = properties("platformVersion")
    type = properties("platformType")
    downloadSources = properties("platformDownloadSources").toBoolean()
    updateSinceUntilBuild = true

    // Plugin Dependencies. Uses `platformPlugins` property from the gradle.properties file.

    plugins = properties("platformPlugins").split(',').toList()
}

// Configure Gradle Changelog Plugin - read more: https://github.com/JetBrains/gradle-changelog-plugin
changelog {
    version = properties("pluginVersion")
    path = "${project.projectDir}/CHANGELOG.md"
//    header = "[${-> version.get()}] - ${new SimpleDateFormat("yyyy-MM-dd").format(new Date())}"
//    headerParserRegex = ~/(\d+\.\d+)/
//    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}


buildPlugin {}

runIde {
    // Absolute path to installed target 3.5 Android Studio to use as
    // IDE Development Instance (the "Contents" directory is macOS specific):
//    ideDir.set(file("/Applications/Android Studio.app/Contents"))
}

patchPluginXml {
    version = properties("pluginVersion")
    sinceBuild = properties("pluginSinceBuild")
    untilBuild = properties("pluginUntilBuild")
    pluginDescription = ExtensionsKt.markdownToHTML(new File(rootDir, "README.md").text)
    // Get the latest available change notes from the changelog file
    changeNotes = ExtensionsKt.markdownToHTML(new File(rootDir, "CHANGELOG.md").text)
}

runPluginVerifier {
    ideVersions = properties("pluginVerifierIdeVersions").split(',').toList()
}